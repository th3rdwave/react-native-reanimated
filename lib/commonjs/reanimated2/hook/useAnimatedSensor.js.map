{"version":3,"names":["SensorType","useAnimatedSensor","sensorType","userConfig","ref","useRef","sensor","unregister","isAvailable","config","interval","current","sensorData","ROTATION","qw","qx","qy","qz","yaw","pitch","roll","x","y","z","makeMutable","useEffect","id","NativeReanimated","registerSensor","unregisterSensor"],"sources":["useAnimatedSensor.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { makeMutable } from '../core';\nimport NativeReanimated from '../NativeReanimated';\nimport { SensorValue3D, SensorValueRotation } from '../commonTypes';\n\nexport enum SensorType {\n  ACCELEROMETER = 1,\n  GYROSCOPE = 2,\n  GRAVITY = 3,\n  MAGNETIC_FIELD = 4,\n  ROTATION = 5,\n}\n\nexport type SensorConfig = {\n  interval: number | 'auto';\n};\n\nexport type AnimatedSensor = {\n  sensor: SensorValue3D | SensorValueRotation | null;\n  unregister: () => void;\n  isAvailable: boolean;\n  config: SensorConfig;\n};\n\nexport function useAnimatedSensor(\n  sensorType: SensorType,\n  userConfig?: SensorConfig\n): AnimatedSensor {\n  const ref = useRef<AnimatedSensor>({\n    sensor: null,\n    unregister: () => {\n      // NOOP\n    },\n    isAvailable: false,\n    config: {\n      interval: 0,\n    },\n  });\n\n  if (ref.current.sensor === null) {\n    ref.current.config = { interval: 'auto', ...userConfig };\n    let sensorData;\n    if (sensorType === SensorType.ROTATION) {\n      sensorData = {\n        qw: 0,\n        qx: 0,\n        qy: 0,\n        qz: 0,\n        yaw: 0,\n        pitch: 0,\n        roll: 0,\n      };\n    } else {\n      sensorData = {\n        x: 0,\n        y: 0,\n        z: 0,\n      };\n    }\n    ref.current.sensor = makeMutable(sensorData) as any;\n  }\n\n  useEffect(() => {\n    ref.current.config = { interval: 'auto', ...userConfig };\n    const id = NativeReanimated.registerSensor(\n      sensorType,\n      ref.current.config.interval === 'auto' ? -1 : ref.current.config.interval,\n      ref.current.sensor as any\n    );\n\n    if (id !== -1) {\n      // if sensor is available\n      ref.current.unregister = () => NativeReanimated.unregisterSensor(id);\n      ref.current.isAvailable = true;\n    } else {\n      // if sensor is unavailable\n      ref.current.unregister = () => {\n        // NOOP\n      };\n      ref.current.isAvailable = false;\n    }\n\n    return () => {\n      ref.current.unregister();\n    };\n  }, [sensorType, userConfig]);\n\n  return ref.current;\n}\n"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;IAGYA,U;;;WAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;GAAAA,U,0BAAAA,U;;AAmBL,SAASC,iBAAT,CACLC,UADK,EAELC,UAFK,EAGW;EAChB,MAAMC,GAAG,GAAG,IAAAC,aAAA,EAAuB;IACjCC,MAAM,EAAE,IADyB;IAEjCC,UAAU,EAAE,MAAM,CAChB;IACD,CAJgC;IAKjCC,WAAW,EAAE,KALoB;IAMjCC,MAAM,EAAE;MACNC,QAAQ,EAAE;IADJ;EANyB,CAAvB,CAAZ;;EAWA,IAAIN,GAAG,CAACO,OAAJ,CAAYL,MAAZ,KAAuB,IAA3B,EAAiC;IAC/BF,GAAG,CAACO,OAAJ,CAAYF,MAAZ,GAAqB;MAAEC,QAAQ,EAAE,MAAZ;MAAoB,GAAGP;IAAvB,CAArB;IACA,IAAIS,UAAJ;;IACA,IAAIV,UAAU,KAAKF,UAAU,CAACa,QAA9B,EAAwC;MACtCD,UAAU,GAAG;QACXE,EAAE,EAAE,CADO;QAEXC,EAAE,EAAE,CAFO;QAGXC,EAAE,EAAE,CAHO;QAIXC,EAAE,EAAE,CAJO;QAKXC,GAAG,EAAE,CALM;QAMXC,KAAK,EAAE,CANI;QAOXC,IAAI,EAAE;MAPK,CAAb;IASD,CAVD,MAUO;MACLR,UAAU,GAAG;QACXS,CAAC,EAAE,CADQ;QAEXC,CAAC,EAAE,CAFQ;QAGXC,CAAC,EAAE;MAHQ,CAAb;IAKD;;IACDnB,GAAG,CAACO,OAAJ,CAAYL,MAAZ,GAAqB,IAAAkB,iBAAA,EAAYZ,UAAZ,CAArB;EACD;;EAED,IAAAa,gBAAA,EAAU,MAAM;IACdrB,GAAG,CAACO,OAAJ,CAAYF,MAAZ,GAAqB;MAAEC,QAAQ,EAAE,MAAZ;MAAoB,GAAGP;IAAvB,CAArB;;IACA,MAAMuB,EAAE,GAAGC,yBAAA,CAAiBC,cAAjB,CACT1B,UADS,EAETE,GAAG,CAACO,OAAJ,CAAYF,MAAZ,CAAmBC,QAAnB,KAAgC,MAAhC,GAAyC,CAAC,CAA1C,GAA8CN,GAAG,CAACO,OAAJ,CAAYF,MAAZ,CAAmBC,QAFxD,EAGTN,GAAG,CAACO,OAAJ,CAAYL,MAHH,CAAX;;IAMA,IAAIoB,EAAE,KAAK,CAAC,CAAZ,EAAe;MACb;MACAtB,GAAG,CAACO,OAAJ,CAAYJ,UAAZ,GAAyB,MAAMoB,yBAAA,CAAiBE,gBAAjB,CAAkCH,EAAlC,CAA/B;;MACAtB,GAAG,CAACO,OAAJ,CAAYH,WAAZ,GAA0B,IAA1B;IACD,CAJD,MAIO;MACL;MACAJ,GAAG,CAACO,OAAJ,CAAYJ,UAAZ,GAAyB,MAAM,CAC7B;MACD,CAFD;;MAGAH,GAAG,CAACO,OAAJ,CAAYH,WAAZ,GAA0B,KAA1B;IACD;;IAED,OAAO,MAAM;MACXJ,GAAG,CAACO,OAAJ,CAAYJ,UAAZ;IACD,CAFD;EAGD,CAvBD,EAuBG,CAACL,UAAD,EAAaC,UAAb,CAvBH;EAyBA,OAAOC,GAAG,CAACO,OAAX;AACD"}