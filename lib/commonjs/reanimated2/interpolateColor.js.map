{"version":3,"names":["Extrapolate","EXTEND","CLAMP","IDENTITY","interpolateColorsHSV","value","inputRange","colors","h","interpolate","s","v","hsvToColor","interpolateColorsRGB","r","g","b","a","rgbaColor","getInterpolateRGB","i","length","color","processedColor","processColor","undefined","push","red","green","blue","opacity","getInterpolateHSV","RGBtoHSV","interpolateColor","outputRange","colorSpace","Error","ColorSpace","useInterpolateConfig","RGB","useSharedValue","cache","makeMutable","interpolateSharableColor","interpolateConfig","HSV"],"sources":["interpolateColor.ts"],"sourcesContent":["import {\n  hsvToColor,\n  RGBtoHSV,\n  rgbaColor,\n  processColor,\n  red,\n  green,\n  blue,\n  opacity,\n} from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\nimport { SharedValue } from './commonTypes';\nimport { useSharedValue } from './hook/useSharedValue';\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV\n) => {\n  'worklet';\n  const h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n  const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n  return hsvToColor(h, s, v);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB\n) => {\n  'worklet';\n  const r = interpolate(value, inputRange, colors.r, Extrapolate.CLAMP);\n  const g = interpolate(value, inputRange, colors.g, Extrapolate.CLAMP);\n  const b = interpolate(value, inputRange, colors.b, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  return rgbaColor(r, g, b, a);\n};\n\ninterface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    // explicit check in case if processedColor is 0\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return { r, g, b, a };\n};\n\ninterface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const h = [];\n  const s = [];\n  const v = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = RGBtoHSV(processColor(color) as any);\n    if (processedColor) {\n      h.push(processedColor.h);\n      s.push(processedColor.s);\n      v.push(processedColor.v);\n    }\n  }\n  return { h, s, v };\n};\n\nexport const interpolateColor = (\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB'\n): string | number => {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange)\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange)\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB\n): SharedValue<InterpolateConfig> {\n  return useSharedValue({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable(null),\n  });\n}\n\nexport const interpolateSharableColor = (\n  value: number,\n  interpolateConfig: SharedValue<InterpolateConfig>\n): string | number => {\n  'worklet';\n  let colors = interpolateConfig.value.cache.value;\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsRGB(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateRGB\n    );\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsHSV(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateHSV\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n"],"mappings":";;;;;;;;AAAA;;AAUA;;AACA;;AAEA;;AAEO,MAAMA,WAAW,GAAG;EACzBC,MAAM,EAAE,QADiB;EAEzBC,KAAK,EAAE,OAFkB;EAGzBC,QAAQ,EAAE;AAHe,CAApB;;;AAMP,MAAMC,oBAAoB,GAAG,CAC3BC,KAD2B,EAE3BC,UAF2B,EAG3BC,MAH2B,KAIxB;EACH;;EACA,MAAMC,CAAC,GAAG,IAAAC,0BAAA,EAAYJ,KAAZ,EAAmBC,UAAnB,EAA+BC,MAAM,CAACC,CAAtC,EAAyCR,WAAW,CAACE,KAArD,CAAV;EACA,MAAMQ,CAAC,GAAG,IAAAD,0BAAA,EAAYJ,KAAZ,EAAmBC,UAAnB,EAA+BC,MAAM,CAACG,CAAtC,EAAyCV,WAAW,CAACE,KAArD,CAAV;EACA,MAAMS,CAAC,GAAG,IAAAF,0BAAA,EAAYJ,KAAZ,EAAmBC,UAAnB,EAA+BC,MAAM,CAACI,CAAtC,EAAyCX,WAAW,CAACE,KAArD,CAAV;EACA,OAAO,IAAAU,kBAAA,EAAWJ,CAAX,EAAcE,CAAd,EAAiBC,CAAjB,CAAP;AACD,CAVD;;AAYA,MAAME,oBAAoB,GAAG,CAC3BR,KAD2B,EAE3BC,UAF2B,EAG3BC,MAH2B,KAIxB;EACH;;EACA,MAAMO,CAAC,GAAG,IAAAL,0BAAA,EAAYJ,KAAZ,EAAmBC,UAAnB,EAA+BC,MAAM,CAACO,CAAtC,EAAyCd,WAAW,CAACE,KAArD,CAAV;EACA,MAAMa,CAAC,GAAG,IAAAN,0BAAA,EAAYJ,KAAZ,EAAmBC,UAAnB,EAA+BC,MAAM,CAACQ,CAAtC,EAAyCf,WAAW,CAACE,KAArD,CAAV;EACA,MAAMc,CAAC,GAAG,IAAAP,0BAAA,EAAYJ,KAAZ,EAAmBC,UAAnB,EAA+BC,MAAM,CAACS,CAAtC,EAAyChB,WAAW,CAACE,KAArD,CAAV;EACA,MAAMe,CAAC,GAAG,IAAAR,0BAAA,EAAYJ,KAAZ,EAAmBC,UAAnB,EAA+BC,MAAM,CAACU,CAAtC,EAAyCjB,WAAW,CAACE,KAArD,CAAV;EACA,OAAO,IAAAgB,iBAAA,EAAUJ,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,CAAP;AACD,CAXD;;AAoBA,MAAME,iBAAiB,GACrBZ,MADwB,IAEL;EACnB;;EAEA,MAAMO,CAAC,GAAG,EAAV;EACA,MAAMC,CAAC,GAAG,EAAV;EACA,MAAMC,CAAC,GAAG,EAAV;EACA,MAAMC,CAAC,GAAG,EAAV;;EACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,MAAM,CAACc,MAA3B,EAAmC,EAAED,CAArC,EAAwC;IACtC,MAAME,KAAK,GAAGf,MAAM,CAACa,CAAD,CAApB;IACA,MAAMG,cAAc,GAAG,IAAAC,oBAAA,EAAaF,KAAb,CAAvB,CAFsC,CAGtC;;IACA,IAAIC,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAKE,SAAlD,EAA6D;MAC3DX,CAAC,CAACY,IAAF,CAAO,IAAAC,WAAA,EAAIJ,cAAJ,CAAP;MACAR,CAAC,CAACW,IAAF,CAAO,IAAAE,aAAA,EAAML,cAAN,CAAP;MACAP,CAAC,CAACU,IAAF,CAAO,IAAAG,YAAA,EAAKN,cAAL,CAAP;MACAN,CAAC,CAACS,IAAF,CAAO,IAAAI,eAAA,EAAQP,cAAR,CAAP;IACD;EACF;;EACD,OAAO;IAAET,CAAF;IAAKC,CAAL;IAAQC,CAAR;IAAWC;EAAX,CAAP;AACD,CArBD;;AA6BA,MAAMc,iBAAiB,GACrBxB,MADwB,IAEL;EACnB;;EACA,MAAMC,CAAC,GAAG,EAAV;EACA,MAAME,CAAC,GAAG,EAAV;EACA,MAAMC,CAAC,GAAG,EAAV;;EACA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,MAAM,CAACc,MAA3B,EAAmC,EAAED,CAArC,EAAwC;IACtC,MAAME,KAAK,GAAGf,MAAM,CAACa,CAAD,CAApB;IACA,MAAMG,cAAc,GAAG,IAAAS,gBAAA,EAAS,IAAAR,oBAAA,EAAaF,KAAb,CAAT,CAAvB;;IACA,IAAIC,cAAJ,EAAoB;MAClBf,CAAC,CAACkB,IAAF,CAAOH,cAAc,CAACf,CAAtB;MACAE,CAAC,CAACgB,IAAF,CAAOH,cAAc,CAACb,CAAtB;MACAC,CAAC,CAACe,IAAF,CAAOH,cAAc,CAACZ,CAAtB;IACD;EACF;;EACD,OAAO;IAAEH,CAAF;IAAKE,CAAL;IAAQC;EAAR,CAAP;AACD,CAjBD;;AAmBO,MAAMsB,gBAAgB,GAAG,UAC9B5B,KAD8B,EAE9BC,UAF8B,EAG9B4B,WAH8B,EAKV;EACpB;;EADoB,IADpBC,UACoB,uEADQ,KACR;;EAEpB,IAAIA,UAAU,KAAK,KAAnB,EAA0B;IACxB,OAAO/B,oBAAoB,CACzBC,KADyB,EAEzBC,UAFyB,EAGzByB,iBAAiB,CAACG,WAAD,CAHQ,CAA3B;EAKD,CAND,MAMO,IAAIC,UAAU,KAAK,KAAnB,EAA0B;IAC/B,OAAOtB,oBAAoB,CACzBR,KADyB,EAEzBC,UAFyB,EAGzBa,iBAAiB,CAACe,WAAD,CAHQ,CAA3B;EAKD;;EACD,MAAM,IAAIE,KAAJ,CACH,iCAAgCD,UAAW,wCADxC,CAAN;AAGD,CAvBM;;;IAyBKE,U;;;WAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;GAAAA,U,0BAAAA,U;;AAYL,SAASC,oBAAT,CACLhC,UADK,EAEL4B,WAFK,EAI2B;EAAA,IADhCC,UACgC,uEADnBE,UAAU,CAACE,GACQ;EAChC,OAAO,IAAAC,8BAAA,EAAe;IACpBlC,UADoB;IAEpB4B,WAFoB;IAGpBC,UAHoB;IAIpBM,KAAK,EAAE,IAAAC,iBAAA,EAAY,IAAZ;EAJa,CAAf,CAAP;AAMD;;AAEM,MAAMC,wBAAwB,GAAG,CACtCtC,KADsC,EAEtCuC,iBAFsC,KAGlB;EACpB;;EACA,IAAIrC,MAAM,GAAGqC,iBAAiB,CAACvC,KAAlB,CAAwBoC,KAAxB,CAA8BpC,KAA3C;;EACA,IAAIuC,iBAAiB,CAACvC,KAAlB,CAAwB8B,UAAxB,KAAuCE,UAAU,CAACE,GAAtD,EAA2D;IACzD,IAAI,CAAChC,MAAL,EAAa;MACXA,MAAM,GAAGY,iBAAiB,CAACyB,iBAAiB,CAACvC,KAAlB,CAAwB6B,WAAzB,CAA1B;MACAU,iBAAiB,CAACvC,KAAlB,CAAwBoC,KAAxB,CAA8BpC,KAA9B,GAAsCE,MAAtC;IACD;;IACD,OAAOM,oBAAoB,CACzBR,KADyB,EAEzBuC,iBAAiB,CAACvC,KAAlB,CAAwBC,UAFC,EAGzBC,MAHyB,CAA3B;EAKD,CAVD,MAUO,IAAIqC,iBAAiB,CAACvC,KAAlB,CAAwB8B,UAAxB,KAAuCE,UAAU,CAACQ,GAAtD,EAA2D;IAChE,IAAI,CAACtC,MAAL,EAAa;MACXA,MAAM,GAAGwB,iBAAiB,CAACa,iBAAiB,CAACvC,KAAlB,CAAwB6B,WAAzB,CAA1B;MACAU,iBAAiB,CAACvC,KAAlB,CAAwBoC,KAAxB,CAA8BpC,KAA9B,GAAsCE,MAAtC;IACD;;IACD,OAAOH,oBAAoB,CACzBC,KADyB,EAEzBuC,iBAAiB,CAACvC,KAAlB,CAAwBC,UAFC,EAGzBC,MAHyB,CAA3B;EAKD;;EACD,MAAM,IAAI6B,KAAJ,CACH,iCAAgCQ,iBAAiB,CAACvC,KAAlB,CAAwB8B,UAAW,wCADhE,CAAN;AAGD,CA9BM"}