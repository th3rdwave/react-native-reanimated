def localProps = new Properties()
def localPropertiesFile = file("local.properties")
if (localPropertiesFile.exists()) {
    localProps.load(new InputStreamReader(new FileInputStream(localPropertiesFile), "UTF-8"))
}
def debugNativeLibraries = localProps.getProperty('NATIVE_DEBUG_ON', 'FALSE').toBoolean()

/**
 * Architectures to build native code for.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

buildscript {
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath('com.android.tools.build:gradle:4.2.2')
        classpath("de.undercouch:gradle-download-task:4.1.2")
    }
}


def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def reactAndroidProjectDir = project(':ReactAndroid').projectDir;
def reactAndroidBuildDir = project(':ReactAndroid').buildDir;
def appBuildDir = project(':app').buildDir;

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'de.undercouch.download'

android {
    compileSdkVersion safeExtGet('compileSdkVersion', 29)
    defaultConfig {

        minSdkVersion safeExtGet('minSdkVersion', 16)
        targetSdkVersion safeExtGet('targetSdkVersion', 29)
        versionCode 1
        versionName "1.0"
        buildConfigField("boolean", "IS_INTERNAL_BUILD", "false")
        buildConfigField("int", "EXOPACKAGE_FLAGS", "0")

        ndk {
            abiFilters (*reactNativeArchitectures())
        }

        externalNativeBuild {
            ndkBuild {
                arguments "NDK_APPLICATION_MK=$projectDir/src/main/JNI/Application.mk",
                        "PROJECT_BUILD_DIR=$appBuildDir",
                        "REACT_ANDROID_DIR=$reactAndroidProjectDir",
                        "REACT_ANDROID_BUILD_DIR=$reactAndroidBuildDir"
                targets "reanimated"
            }
        }
    }
    lintOptions {
        abortOnError false
    }

    externalNativeBuild {
        ndkBuild {
            path "$projectDir/src/main/JNI/Android.mk"
        }
    }

    packagingOptions {
        excludes = [
            "**/libc++_shared.so",
            "**/libfb.so",
            "**/libfbjni.so",
            "**/libfolly_json.so",
            "**/libhermes.so",
            "**/libjsi.so",
            "**/libreact_nativemodule_core.so",
            "**/libreactnativejni.so",
            "**/libturbomodulejsijni.so",
        ]
    }
}

def findTask(name) {
    return tasks.find({ task -> task.name.startsWith(name) })
}

afterEvaluate {
    findTask("configureNdkBuildDebug").dependsOn(":app:packageReactDebugNdkLibs")
    findTask("configureNdkBuildRelease").dependsOn(":app:packageReactReleaseNdkLibs")
    preDebugBuild.dependsOn(":app:packageReactDebugNdkLibs")
    preReleaseBuild.dependsOn(":app:packageReactReleaseNdkLibs")
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        url "$rootDir/../node_modules/react-native/android"
    }
    maven {
        // Android JSC is installed from npm
        url "$rootDir/../node_modules/jsc-android/dist"
    }
    google()
    // FIXME jcenter is deprecated and will be removed soon, however some modules still doesn't migrate to maven central
    jcenter() {
        content {
            includeModule("com.facebook.fbjni", "fbjni-java-only")
            includeModule("com.facebook.yoga", "proguard-annotations")

        }
    }
}

dependencies {
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation "androidx.transition:transition:1.1.0"
    api("com.facebook.fbjni:fbjni-java-only:0.0.3")
}

