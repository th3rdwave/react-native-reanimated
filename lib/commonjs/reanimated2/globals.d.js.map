{"version":3,"names":[],"sources":["globals.d.ts"],"sourcesContent":["import { AnimatedStyle, StyleProps } from './commonTypes';\nimport { ReanimatedConsole } from './core';\nimport { ShadowNodeWrapper } from './hook/commonTypes';\nimport { MeasuredDimensions } from './NativeMethods';\nimport { NativeReanimated } from './NativeReanimated/NativeReanimated';\ndeclare global {\n  const _WORKLET: boolean;\n  const _IS_FABRIC: boolean;\n  const _frameTimestamp: number;\n  const _eventTimestamp: number;\n  const _setGlobalConsole: (console?: ReanimatedConsole) => void;\n  const _getCurrentTime: () => number;\n  const _stopObservingProgress: (tag: number, flag: boolean) => void;\n  const _startObservingProgress: (\n    tag: number,\n    flag: { value: boolean; _value: boolean }\n  ) => void;\n  const _setGestureState: (handlerTag: number, newState: number) => void;\n  const _updatePropsPaper: (\n    tag: number,\n    name: string,\n    updates: StyleProps | AnimatedStyle\n  ) => void;\n  const _updatePropsFabric: (\n    shadowNodeWrapper: ShadowNodeWrapper,\n    props: StyleProps | AnimatedStyle\n  ) => void;\n  const _removeShadowNodeFromRegistry: (\n    shadowNodeWrapper: ShadowNodeWrapper\n  ) => void;\n  const _measure: (viewTag: number) => MeasuredDimensions;\n  const _scrollTo: (\n    viewTag: number,\n    x: number,\n    y: number,\n    animated: boolean\n  ) => void;\n  const _dispatchCommand: (\n    shadowNodeWrapper: ShadowNodeWrapper,\n    commandName: string,\n    args: Array<unknown>\n  ) => void;\n  const _chronoNow: () => number;\n  const ReanimatedDataMock: {\n    now: () => number;\n  };\n  namespace NodeJS {\n    interface Global {\n      _setGlobalConsole: (console?: ReanimatedConsole) => void;\n      _log: (s: string) => void;\n      _setGestureState: () => void;\n      _WORKLET: boolean;\n      _IS_FABRIC: boolean;\n      __reanimatedModuleProxy: NativeReanimated;\n      _frameTimestamp: number | null;\n      _measure: () => MeasuredDimensions;\n      _scrollTo: () => void;\n      _dispatchCommand: () => void;\n      _chronoNow: () => number;\n      performance: { now: () => number };\n      LayoutAnimationRepository: {\n        configs: Record<string, unknown>;\n        registerConfig(tag: number, config: Record<string, unknown>): void;\n        removeConfig(tag: number): void;\n        shouldAnimate(tag: number, type: string): void;\n        startAnimationForTag(\n          tag: number,\n          type: string,\n          yogaValues: unknown\n        ): void;\n      };\n      ReanimatedDataMock: {\n        now: () => number;\n      };\n    }\n  }\n}\n"],"mappings":""}